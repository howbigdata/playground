// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lcaworld.Db;

namespace lcaworld.Migrations
{
    [DbContext(typeof(LcaContext))]
    [Migration("20200824095519_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("LcaWorld.Models.CharacterisationFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElementaryFlowId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Factor")
                        .HasColumnType("REAL");

                    b.Property<int>("MethodId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ElementaryFlowId");

                    b.HasIndex("MethodId");

                    b.ToTable("CharacterisationFactors");
                });

            modelBuilder.Entity("LcaWorld.Models.Compartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Compartments");
                });

            modelBuilder.Entity("LcaWorld.Models.ElementaryFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubCompartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompartmentId");

                    b.HasIndex("SubCompartmentId");

                    b.HasIndex("UnitId");

                    b.ToTable("ElementaryFlows");
                });

            modelBuilder.Entity("LcaWorld.Models.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("LcaWorld.Models.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("LcaWorld.Models.ProcessExchanges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElementaryFlowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ElementaryFlowId");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessExchanges");
                });

            modelBuilder.Entity("LcaWorld.Models.SubCompartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompartmentId");

                    b.ToTable("SubCompartments");
                });

            modelBuilder.Entity("LcaWorld.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("LcaWorld.Models.CharacterisationFactor", b =>
                {
                    b.HasOne("LcaWorld.Models.ElementaryFlow", "ElementaryFlow")
                        .WithMany()
                        .HasForeignKey("ElementaryFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LcaWorld.Models.Method", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LcaWorld.Models.ElementaryFlow", b =>
                {
                    b.HasOne("LcaWorld.Models.Compartment", "Compartment")
                        .WithMany()
                        .HasForeignKey("CompartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LcaWorld.Models.SubCompartment", "SubCompartment")
                        .WithMany()
                        .HasForeignKey("SubCompartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LcaWorld.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LcaWorld.Models.ProcessExchanges", b =>
                {
                    b.HasOne("LcaWorld.Models.ElementaryFlow", "ElementaryFlow")
                        .WithMany()
                        .HasForeignKey("ElementaryFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LcaWorld.Models.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LcaWorld.Models.SubCompartment", b =>
                {
                    b.HasOne("LcaWorld.Models.Compartment", "Compartment")
                        .WithMany()
                        .HasForeignKey("CompartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
